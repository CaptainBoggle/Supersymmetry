def ASSEMBLER = recipemap('assembler')
def VACUUM = recipemap('vacuum_chamber')
def CIRCUIT_ASSEMBLER = recipemap('circuit_assembler')

//Change transistor to use silicon wafer instead of silicon plate
// Transistor * 8
mods.gregtech.assembler.removeByInput(120, [metaitem('plateSilicon'), metaitem('wireFineTin') * 6], [fluid('plastic') * 144])

ASSEMBLER.recipeBuilder()
        .inputs(ore('wireFineTin') * 6)
        .inputs(metaitem('wafer.silicon'))
        .fluidInputs(fluid('plastic') * 144)
        .outputs(metaitem('component.transistor') * 8)
        .duration(160)
        .EUt(120)
        .buildAndRegister()

CIRCUIT_ASSEMBLER.recipeBuilder()
        .inputs(ore('wireFineGold') * 6)
        .inputs(ore('componentCapacitor'))
        .inputs(ore('componentResistor') * 6)
        .inputs(ore('componentTransistor') * 16)
        .inputs(ore('componentDiode') * 2)
        .inputs(metaitem('board.phenolic'))
        .fluidInputs(fluid('soldering_alloy') * 72)
        .outputs(metaitem('op_amp'))
        .duration(100)
        .EUt(30)
        .buildAndRegister()

ASSEMBLER.recipeBuilder()
        .inputs(ore('plateAluminium') * 8)
        .circuitMeta(5)
        .fluidInputs(fluid('soldering_alloy') * 72)
        .outputs(metaitem('heat_sink'))
        .duration(200)
        .EUt(30)
        .buildAndRegister()


ASSEMBLER.recipeBuilder()
        .inputs(ore('plateAluminium') * 8)
        .circuitMeta(7)
        .fluidInputs(fluid('silicone_oil') * 72)
        .outputs(metaitem('heat_sink' * 4))
        .duration(200)
        .EUt(30)
        .buildAndRegister()

ASSEMBLER.recipeBuilder()
        .inputs(ore('plateAluminium') * 8)
        .circuitMeta(5)
        .fluidInputs(fluid('soldering_alloy') * 72)
        .outputs(metaitem('heat_sink'))
        .duration(200)
        .EUt(30)
        .buildAndRegister()

ASSEMBLER.recipeBuilder()
        .inputs(ore('wireFineAnnealedCopper') * 4)
        .inputs(metaitem('wafer.n_doped.silicon'))
        .fluidInputs(fluid('plastic') * 144)
        .outputs(metaitem('zener_diode') * 16)
        .duration(300)
        .EUt(30)
        .buildAndRegister()

ASSEMBLER.recipeBuilder()
        .inputs(ore('dustAcidWashedSiliconDioxide'))
        .inputs(ore('wireFineSilver'))
        .inputs(ore('wireFineAnnealedCopper') * 2)
        .fluidInputs(fluid('plastic') * 36)
        .outputs(metaitem('fuse.hv'))
        .duration(100)
        .EUt(30)
        .buildAndRegister()

CIRCUIT_ASSEMBLER.recipeBuilder()
        .inputs(ore('componentCapacitor') * 2)
        .inputs(ore('componentTransistor') * 14)
        .inputs(ore('wireFineGold') * 6)
        .inputs(ore('componentResistor') * 6)
        .inputs(metaitem('protector_chip'))
        .inputs(metaitem('board.plastic'))
        .fluidInputs(fluid('soldering_alloy') * 72)
        .outputs(metaitem('voltage_regulator.hv.unsealed'))
        .duration(400)
        .EUt(30)
        .buildAndRegister()

CIRCUIT_ASSEMBLER.recipeBuilder()
        .inputs(ore('componentTransistor') * 2)
        .inputs(metaitem("op_amp"))
        .inputs(ore('wireFineGold') * 2)
        .inputs(metaitem('zener_diode'))
        .inputs(metaitem('board.phenolic'))
        .fluidInputs(fluid('soldering_alloy') * 72)
        .outputs(metaitem('voltage_regulator.mv'))
        .duration(400)
        .EUt(30)
        .buildAndRegister()

VACUUM.recipeBuilder()
        .inputs(metaitem('voltage_regulator.hv.unsealed'))
        .inputs(ore('wireFineAluminium') * 4)
        .fluidInputs(fluid('plastic') * 144)
        .outputs(metaitem('voltage_regulator.hv'))
        .duration(200)
        .EUt(64)
        .buildAndRegister()

CIRCUIT_ASSEMBLER.recipeBuilder()
        .inputs(ore('wireFineAluminium') * 2)
        .inputs(ore('wireFineGold') * 2)
        .inputs(metaitem('heat_sink') * 2)
        .inputs(metaitem('fuse.hv'))
        .inputs(metaitem('zener_diode'))
        .inputs(metaitem('board.phenolic'))
        .fluidInputs(fluid('soldering_alloy') * 72)
        .outputs(metaitem('protector_chip'))
        .duration(400)
        .EUt(30)
        .buildAndRegister()